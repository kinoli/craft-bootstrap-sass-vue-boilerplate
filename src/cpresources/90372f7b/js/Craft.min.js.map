{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","first","focus","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnpublishedDraft","saveDraft","isActive","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","publishDraftAction","hashedCpEditUrl","$saveBtnContainer","deleteDraftAction","data-align","clientOs","hashedAddAnotherRedirectUrl","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","inputmode","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n        if (this.drafts) {\n            criteria.drafts = true;\n            criteria.draftOf = false;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        }, this));\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n        this.$target.trigger('change');\n        this.$target.trigger('input');\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n\n        // Open outbound links in new windows\n        // hat tip: https://stackoverflow.com/a/2911045/1688568\n        $('a').each(function() {\n            if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                $(this).attr('rel', 'noopener').attr('target', '_blank')\n            }\n        });\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n        var i, $tab, $a, href;\n\n        for (i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            $a = $tab.children('a');\n            href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'click', function(ev) {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role');\n            } else {\n                $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    preview: null,\n    previewToken: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n    },\n\n    mergeChanges: function() {\n        // Make sure there aren't any unsaved changes\n        this.checkForm();\n\n        // Make sure we aren't currently saving something\n        if (this.saving) {\n            this.queue.push(this.mergeChanges.bind(this));\n            return;\n        }\n\n        this.saving = true;\n        $('#merge-changes-spinner').removeClass('hidden');\n\n        Craft.postActionRequest('drafts/merge-source-changes', {\n            elementType: this.settings.elementType,\n            draftId: this.settings.draftId,\n            siteId: this.settings.siteId,\n        }, function(response, textStatus) {\n            if (textStatus === 'success') {\n                window.location.reload();\n            } else {\n                $('#merge-changes-spinner').addClass('hidden');\n            }\n        });\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = true;\n                    }\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = false;\n                        const $statusIcons = this.statusIcons();\n                        if ($statusIcons.hasClass('checkmark-icon')) {\n                            $statusIcons.addClass('hidden');\n                        }\n                    }\n                    this.stopListeningForChanges();\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Save as a Draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: (Craft.clientOs === 'Mac' ? '⌘' : 'Ctrl+') + 'S',\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!this.enableAutosave) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                }, this));\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n        if (this.drafts) {\n            criteria.drafts = true;\n            criteria.draftOf = false;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        }, this));\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n        this.$target.trigger('change');\n        this.$target.trigger('input');\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n\n        // Open outbound links in new windows\n        // hat tip: https://stackoverflow.com/a/2911045/1688568\n        $('a').each(function() {\n            if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                $(this).attr('rel', 'noopener').attr('target', '_blank')\n            }\n        });\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n        var i, $tab, $a, href;\n\n        for (i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            $a = $tab.children('a');\n            href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'click', function(ev) {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role');\n            } else {\n                $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    preview: null,\n    previewToken: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n    },\n\n    mergeChanges: function() {\n        // Make sure there aren't any unsaved changes\n        this.checkForm();\n\n        // Make sure we aren't currently saving something\n        if (this.saving) {\n            this.queue.push(this.mergeChanges.bind(this));\n            return;\n        }\n\n        this.saving = true;\n        $('#merge-changes-spinner').removeClass('hidden');\n\n        Craft.postActionRequest('drafts/merge-source-changes', {\n            elementType: this.settings.elementType,\n            draftId: this.settings.draftId,\n            siteId: this.settings.siteId,\n        }, function(response, textStatus) {\n            if (textStatus === 'success') {\n                window.location.reload();\n            } else {\n                $('#merge-changes-spinner').addClass('hidden');\n            }\n        });\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = true;\n                    }\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = false;\n                        const $statusIcons = this.statusIcons();\n                        if ($statusIcons.hasClass('checkmark-icon')) {\n                            $statusIcons.addClass('hidden');\n                        }\n                    }\n                    this.stopListeningForChanges();\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Save as a Draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: (Craft.clientOs === 'Mac' ? '⌘' : 'Ctrl+') + 'S',\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!this.enableAutosave) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                }, this));\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}