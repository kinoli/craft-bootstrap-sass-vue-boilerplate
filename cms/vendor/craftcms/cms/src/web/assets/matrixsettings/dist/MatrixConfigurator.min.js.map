{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","$container","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","selectedBlockType","blockTypeSort","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","totalNewBlockTypes","init","placeholderKey","$blockTypesColumnContainer","$blockTypeItemsContainer","this","children","$fieldItemsOuterContainer","blockTypes","$blockTypeItems","length","id","$item","newMatch","DragSort","i","addListener","match","proxy","maxColHeight","getFieldTypeInfo","type","handle","axis","getBlockTypeSettingsModal","blockTypeSettingsModal","show","onSubmit","name","setContainerHeight","setTimeout","applySettings","height","select","addFieldToSelectedBlockType","addField","addBlockType","getFieldTypeSettingsHtml","Promise","t","appendTo","BlockType","axios","CancelToken","sendActionRequest","addItems","resolve","response","BlockTypeSettingsModal","reject","cancel","$body","source","cancelToken","token","$handleInputContainer","$handleErrorList","then","$cancelBtn","data","catch","$buttons","displayError","ev","Modal","visible","$form","$bod","setContainer","$nameInputContainer","updateTarget","label","instructions","find","$nameInput","val","$nameErrorList","hide","ui","createTextField","shake","$handleInput","onDeleteClick","confirm","$deleteBtn","onDelete","class","text","errors","handleGenerator","startListening","stopListening","HandleGenerator","addClass","onFormSubmit","removeClass","displayErrors","$submitBtn","listening","trim","attr","$errorList","remove","$nameHiddenInput","$handleHiddenInput","$fieldSettingsContainer","isMobileBrowser","totalNewFields","trigger","configurator","base","$nameContainer","$nameLabel","$settingsBtn","$input","$fieldItems","$fieldItem","$handleLabel","onSortChange","fieldSettings","field","fields","deselect","insertBefore","Field","parseInt","fieldSort","$items","blockType","initializedFieldTypeSettings","$requiredCheckbox","$typeSettingsContainer","$widthInput","showSettings","$typeSelect","$translationSettingsContainer","isNew","setFieldType","selectedFieldType","valueLabel","width","pct","selectedField","updateNameLabel","updateHandleLabel","updateRequiredIcon","onTypeSelectChange","updateTranslationMethodSettings","getDefaultFieldSettings","getFieldTypeSettings","$settings","append","initUiElements","appendHeadHtml","SlidePicker","min","max","fresh","onChange","insertAfter","settingsHtml","getParsedFieldTypeHtml","headHtml","footHtml","replace","RegExp","escapeHtml","html","maxlength","prop","$fieldset","detach","fieldTypeOptions","createSelectField","appendFootHtml","$translationKeyFormatContainer","noop","confirmDelete","required","createTextareaField","createCheckboxField","checked","push","value","options","isMultiSite","toggle","targetPrefix","selfDestruct","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.setContainerHeight();\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n            this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n            this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n            this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n        },\n\n        setContainerHeight: function() {\n            setTimeout($.proxy(function() {\n                var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                this.$container.height(maxColHeight);\n            }, this), 1);\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            }, this);\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Save'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout($.proxy(function() {\n                    this.$nameInput.trigger('focus');\n                }, this), 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                }, this)\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n            blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout($.proxy(function() {\n                    this.$nameInput.trigger('focus');\n                }, this), 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                // In case Firefox was sleeping on the job\n                this.$typeSettingsContainer.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"]}