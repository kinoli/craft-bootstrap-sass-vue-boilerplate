{"version":3,"sources":["quickpost/src/QuickPostWidget.js"],"names":["$","Craft","QuickPostWidget","Garnish","Base","extend","params","initFields","$widget","$form","$formClone","$spinner","$errorList","init","widgetId","find","initForm","clone","this","$menuBtn","menubtn","addListener","$saveAndContinueEditingBtn","data","menu","$container","preventDefault","saveAndContinueEditing","handleFormSubmit","callback","event","loading","save","proxy","formData","getPostData","postActionRequest","children","remove","textStatus","enabled","cp","response","addClass","errors","success","attribute","displayNotice","t","displayError","error","appendTo","insertAfter","hasOwnProperty","i","length","widget","addEntry","title","dateCreated","$newForm","username","RecentEntriesWidget","instances","sectionId","cpEditUrl","authorUsername","gotoEntry","redirectTo","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,gBAAAC,QAAAC,KAAAC,OAAA,CACMH,OAAAA,KACFI,WADwC,KAExCC,QAAY,KACZC,MAAS,KACTC,WAJwC,KAKxCC,SAAY,KACZC,WANwC,KAOxCC,SAAY,EAGRC,KAAE,SAASC,EAAUR,EAAQC,GACxBD,KAALA,OAAAA,EACKC,KAAAA,WAAaA,EACbC,KAAAA,QAAYR,EAAA,UAAYc,GAGxBJ,IAAAA,EAAaD,KAAKD,QAAvBO,KAAA,cACKC,KAAAA,WAALP,EAAAQ,QAjBoCC,KAAAF,SAAAP,IAsBpCO,SAAKL,SAAgBF,GAEhBF,KAAAA,MAALE,EAEIU,KAAAA,SAAgBV,KAAMM,MAAKA,KAAA,YAG/BI,KAASC,aAGJC,IAAAA,EAAYC,KAAAA,MAAAA,KAAAA,qCAhCmBA,EAAAH,EAAAI,KAAA,WAAAC,KAAAC,WAAAV,KAAA,iBAoC9BW,EAAAA,UApC8BR,KAAAG,YAAAH,KAAAT,MAAA,SAAA,oBAyCxCkB,KAAAA,YAAwBL,EAAW,QAAA,2BAI/BM,iBAAWC,SAAUC,GACjBA,EAAKC,iBAERb,KAAAc,KAAAhC,EAAAiC,MAAAf,KAAA,YAGDS,uBAA0B,WAEtBO,KAAAA,KAAW/B,EAAAA,MAAQgC,KAAAA,eACZH,KAAuBE,SAAUL,GAEtCO,IAAAA,KAAAA,QAAAA,CAIElB,KAAKN,SAAT,EACIM,KAAKN,SAAWyB,YAAWC,UARnC,IAAIJ,EAAW/B,QAAQgC,YAAYjB,KAAKT,OAWhC8B,EAAUvC,EAAAK,OAAK,CAAAmC,QAAW,GAAAN,EAAAhB,KAAAZ,QAEtBL,MAAMwC,kBAAiBxC,qBAAesB,EAAfvB,EAAvBiC,OAAA,SAAAS,EAAAH,GAQK,GAPLV,KAASa,SAAT,EAFJxB,KAGOP,SAAAgC,SAAA,UARPzB,KAAKN,YAWG8B,KAASE,WAAQP,WAAAC,SAGhB,YAAAC,EATT,GAAIG,EAASG,QAWIC,MAAAA,GAATC,cAA+BH,MAAQI,EAAA,MAAA,iBAC9BN,EAASE,QAIT,GAFJ3C,MAAAwC,GAAAQ,aAAAhD,MAAA+C,EAAA,MAAA,yBAESN,EAAUA,OAK3B,IAAA,IAAAI,KAJuBJ,KAAQ9B,aACTsC,KAAQtC,WAASuC,EAAAA,wBAA5BC,YAAAlC,KAAAT,QAGXiC,EAAAE,OACJ,GAAAF,EAAAE,OAAAS,eAAAP,GAKc,IAAA,IAAAQ,EAAA,EAAAA,EAAAZ,EAAAE,OAAAE,GAAAS,OAAAD,IAAA,CACvB,IAAAJ,EAAAR,EAAAE,OAAAE,GAAAQ,GACetD,EAAgBiB,OAA/BiC,EAAA,SAAAC,SAAAjC,KAAAN,eAOY4C,SAEAA,OAAAA,SAAOC,GAEHC,IAAAA,EAAOhB,KAASgB,WAFJzC,QAOvB,GAJW0C,KAAAA,MAAAA,YAAqBC,GACrBC,KAAAA,SAAUnB,QAGrB,IAAAzC,MAAA6D,oBACJ,IAAA,IAAAR,EAAA,EAAAA,EAAArD,MAAA6D,oBAAAC,UAAAR,OAAAD,IAAA,CA/GmC,IAAAE,EAAAvD,MAAA6D,oBAAAC,UAAAT,GAkHpBZ,EAAAA,OAAUsB,WAAAR,EAAAlD,OAAA0D,WAAA9C,KAAAZ,OAAA0D,WAC1BR,EAAAC,SAAA,CACiBf,IAASuB,EAA1BA,UACHP,MAAAhB,EAAAgB,MArHLC,YAAAjB,EAAAiB,YAHJE,SAAAnB,EAAAwB,mBAqHQC,UAAW,SAASzB,GAEhBzC,MAAMmE,WAAW1B,EAASuB,cAvHtC,CA0HGI","file":"QuickPostWidget.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.QuickPostWidget = Garnish.Base.extend({\n        params: null,\n        initFields: null,\n        $widget: null,\n        $form: null,\n        $formClone: null,\n        $spinner: null,\n        $errorList: null,\n        loading: false,\n\n        init: function(widgetId, params, initFields) {\n            this.params = params;\n            this.initFields = initFields;\n            this.$widget = $('#widget' + widgetId);\n\n            var $form = this.$widget.find('form:first');\n            this.$formClone = $form.clone();\n            this.initForm($form);\n        },\n\n        initForm: function($form) {\n            this.$form = $form;\n            this.$spinner = this.$form.find('.spinner');\n\n            this.initFields();\n\n            var $menuBtn = this.$form.find('> .buttons > .btngroup > .menubtn'),\n                $saveAndContinueEditingBtn = $menuBtn.data('menubtn').menu.$container.find('> ul > li > a');\n\n            $menuBtn.menubtn();\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n            this.addListener($saveAndContinueEditingBtn, 'click', 'saveAndContinueEditing');\n        },\n\n        handleFormSubmit: function(event) {\n            event.preventDefault();\n\n            this.save($.proxy(this, 'onSave'));\n        },\n\n        saveAndContinueEditing: function() {\n            this.save($.proxy(this, 'gotoEntry'));\n        },\n\n        save: function(callback) {\n            if (this.loading) {\n                return;\n            }\n\n            this.loading = true;\n            this.$spinner.removeClass('hidden');\n\n            var formData = Garnish.getPostData(this.$form),\n                data = $.extend({enabled: 1}, formData, this.params);\n\n            Craft.postActionRequest('entries/save-entry', data, $.proxy(function(response, textStatus) {\n                this.loading = false;\n                this.$spinner.addClass('hidden');\n\n                if (this.$errorList) {\n                    this.$errorList.children().remove();\n                }\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        Craft.cp.displayNotice(Craft.t('app', 'Entry saved.'));\n                        callback(response);\n                    } else {\n                        Craft.cp.displayError(Craft.t('app', 'Couldnâ€™t save entry.'));\n\n                        if (response.errors) {\n                            if (!this.$errorList) {\n                                this.$errorList = $('<ul class=\"errors\"/>').insertAfter(this.$form);\n                            }\n\n                            for (var attribute in response.errors) {\n                                if (!response.errors.hasOwnProperty(attribute)) {\n                                    continue;\n                                }\n\n                                for (var i = 0; i < response.errors[attribute].length; i++) {\n                                    var error = response.errors[attribute][i];\n                                    $('<li>' + error + '</li>').appendTo(this.$errorList);\n                                }\n                            }\n                        }\n                    }\n                }\n            }, this));\n        },\n\n        onSave: function(response) {\n            // Reset the widget\n            var $newForm = this.$formClone.clone();\n            this.$form.replaceWith($newForm);\n            this.initForm($newForm);\n\n            // Are there any Recent Entries widgets to notify?\n            if (typeof Craft.RecentEntriesWidget !== 'undefined') {\n                for (var i = 0; i < Craft.RecentEntriesWidget.instances.length; i++) {\n                    var widget = Craft.RecentEntriesWidget.instances[i];\n                    if (!widget.params.sectionId || widget.params.sectionId == this.params.sectionId) {\n                        widget.addEntry({\n                            url: response.cpEditUrl,\n                            title: response.title,\n                            dateCreated: response.dateCreated,\n                            username: response.authorUsername\n                        });\n                    }\n                }\n            }\n        },\n\n        gotoEntry: function(response) {\n            // Redirect to the entry's edit URL\n            Craft.redirectTo(response.cpEditUrl);\n        }\n    });\n})(jQuery);\n"]}