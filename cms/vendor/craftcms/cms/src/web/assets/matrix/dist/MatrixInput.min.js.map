{"version":3,"sources":["matrix/src/MatrixInput.js"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","id","blockTypesByHandle","blockTypes","inputIdPrefix","showingAddBlockMenu","addBlockBtnGroupWidth","$container","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSelect","totalNewBlocks","init","inputNamePrefix","settings","i","$blocks","this","formatInputId","maxBlocks","setSettings","defaults","children","$addBlockMenuBtn","setNewBlockBtn","blockType","collapsedBlocks","getCollapsedBlockIds","blockSort","DragSort","filter","getSelectedItems","handle","axis","proxy","collapseDraggees","$targetItem","hasClass","magnetStrength","helperOpacity","onSortChange","resetItemOrder","checkboxMode","length","Select","$block","blockId","newMatch","parseInt","data","block","match","target","inArray","MenuBtn","collapse","addListener","ev","type","updateAddBlockBtn","trigger","onOptionSelect","option","$doc","ready","addBlockBtnContainerWidth","width","requestAnimationFrame","addClass","removeClass","navigator","userAgent","indexOf","css","canAddMoreBlocks","$actionMenu","$items","eq","find","parent","getBlockTypeByHandle","addBlock","$insertBefore","html","staticBlocks","name","t","footHtml","getHiddenBlockCss","window","draftEditor","pause","MatrixBlock","addItems","$fieldsContainer","appendTo","scrollContainerToElement","bodyHtml","getParsedBlockHtml","velocity","opacity","initUiElements","collapseSelectedBlocks","callOnSelectedBlocks","expandSelectedBlocks","autofocus","disableSelectedBlocks","first","resume","placeholderKey","deleteSelectedBlocks","collapsedBlockStorageKey","filterArray","localStorage","$selectedItems","fn","rememberCollapsedBlockId","marginBottom","outerHeight","push","setCollapsedBlockIds","replace","RegExp","matrix","systemUid","$titlebar","split","ids","join","forgetCollapsedBlockId","collapsedBlocksIndex","splice","menuBtn","$previewContainer","$collapsedInput","preventDefault","collapsed","expand","isNew","substr","$menuBtn","$fields","menu","$inputs","$field","inputPreviewText","prev","next","$maybeLightswitchContainer","on","value","$input","hasAttr","_handleTitleBarClick","toggle","animate","show","j","hide","text","getText","getInputPostVal","Array","trim","displayValue","collapsedContainerHeight","previewHtml","height","expandedContainerHeight","duration","val","setTimeout","$prev","display","Storage","onMenuOptionSelect","$option","disable","batchAction","enable","moveUp","insertBefore","moveDown","$next","insertAfter","totalSelected","isSelected","confirm","enableSelectedBlocks","selfDestruct","remove","jQuery"],"mappings":"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","file":"MatrixInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend({\n        id: null,\n        blockTypes: null,\n        blockTypesByHandle: null,\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        showingAddBlockMenu: false,\n        addBlockBtnGroupWidth: null,\n        addBlockBtnContainerWidth: null,\n\n        $container: null,\n        $blockContainer: null,\n        $addBlockBtnContainer: null,\n        $addBlockBtnGroup: null,\n        $addBlockBtnGroupBtns: null,\n\n        blockSort: null,\n        blockSelect: null,\n        totalNewBlocks: 0,\n\n        init: function(id, blockTypes, inputNamePrefix, settings) {\n            this.id = id;\n            this.blockTypes = blockTypes;\n            this.inputNamePrefix = inputNamePrefix;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n            // see if settings was actually set to the maxBlocks value\n            if (typeof settings === 'number') {\n                settings = {maxBlocks: settings};\n            }\n            this.setSettings(settings, Craft.MatrixInput.defaults);\n\n            this.$container = $('#' + this.id);\n            this.$blockContainer = this.$container.children('.blocks');\n            this.$addBlockBtnContainer = this.$container.children('.buttons');\n            this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n            this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n            this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n            this.$container.data('matrix', this);\n\n            this.setNewBlockBtn();\n\n            this.blockTypesByHandle = {};\n\n            var i;\n\n            for (i = 0; i < this.blockTypes.length; i++) {\n                var blockType = this.blockTypes[i];\n                this.blockTypesByHandle[blockType.handle] = blockType;\n            }\n\n            var $blocks = this.$blockContainer.children(),\n                collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n            this.blockSort = new Garnish.DragSort($blocks, {\n                handle: '> .actions > .move',\n                axis: 'y',\n                filter: $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.blockSort.$targetItem.hasClass('sel')) {\n                        return this.blockSelect.getSelectedItems();\n                    } else {\n                        return this.blockSort.$targetItem;\n                    }\n                }, this),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                helperOpacity: 0.9,\n                onSortChange: $.proxy(function() {\n                    this.blockSelect.resetItemOrder();\n                }, this)\n            });\n\n            this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                multi: true,\n                vertical: true,\n                handle: '> .checkbox, > .titlebar',\n                checkboxMode: true\n            });\n\n            for (i = 0; i < $blocks.length; i++) {\n                var $block = $($blocks[i]),\n                    blockId = $block.data('id');\n\n                // Is this a new block?\n                var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                    this.totalNewBlocks = parseInt(newMatch[1]);\n                }\n\n                var block = new MatrixBlock(this, $block);\n\n                if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                    block.collapse();\n                }\n            }\n\n            this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                var type = $(ev.target).data('type');\n                this.addBlock(type);\n            });\n\n            new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                {\n                    onOptionSelect: $.proxy(function(option) {\n                        var type = $(option).data('type');\n                        this.addBlock(type);\n                    }, this)\n                });\n\n            this.updateAddBlockBtn();\n\n            this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n            Garnish.$doc.ready($.proxy(this, 'setNewBlockBtn'));\n\n            this.trigger('afterInit');\n        },\n\n        setNewBlockBtn: function() {\n            // Do we know what the button group width is yet?\n            if (!this.addBlockBtnGroupWidth) {\n                this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                if (!this.addBlockBtnGroupWidth) {\n                    return;\n                }\n            }\n\n            // Only check if the container width has resized\n            if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                    if (!this.showingAddBlockMenu) {\n                        this.$addBlockBtnGroup.addClass('hidden');\n                        this.$addBlockMenuBtn.removeClass('hidden');\n                        this.showingAddBlockMenu = true;\n                    }\n                } else {\n                    if (this.showingAddBlockMenu) {\n                        this.$addBlockMenuBtn.addClass('hidden');\n                        this.$addBlockBtnGroup.removeClass('hidden');\n                        this.showingAddBlockMenu = false;\n\n                        // Because Safari is awesome\n                        if (navigator.userAgent.indexOf('Safari') !== -1) {\n                            Garnish.requestAnimationFrame($.proxy(function() {\n                                this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                Garnish.requestAnimationFrame($.proxy(function() {\n                                    this.$addBlockBtnGroup.css('opacity', '');\n                                }, this));\n                            }, this));\n                        }\n                    }\n                }\n            }\n        },\n\n        canAddMoreBlocks: function() {\n            return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n        },\n\n        updateAddBlockBtn: function() {\n            var i, block;\n\n            if (this.canAddMoreBlocks()) {\n                this.$addBlockBtnGroup.removeClass('disabled');\n                this.$addBlockMenuBtn.removeClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                    }\n                }\n            } else {\n                this.$addBlockBtnGroup.addClass('disabled');\n                this.$addBlockMenuBtn.addClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                    }\n                }\n            }\n        },\n\n        addBlock: function(type, $insertBefore, autofocus) {\n            if (!this.canAddMoreBlocks()) {\n                return;\n            }\n\n            this.totalNewBlocks++;\n\n            var id = 'new' + this.totalNewBlocks;\n\n            var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <a class=\"settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\" role=\"button\"></a> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n        <li><a data-icon=\"uarr\" data-action=\"moveUp\">${Craft.t('app', 'Move up')}</a></li>\n        <li><a data-icon=\"darr\" data-action=\"moveDown\">${Craft.t('app', 'Move down')}</a></li>\n      </ul>`;\n\n            if (!this.settings.staticBlocks) {\n                html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                }\n\n                html += `\n      </ul>`\n            }\n\n            html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n            var $block = $(html);\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            if ($insertBefore) {\n                $block.insertBefore($insertBefore);\n            } else {\n                $block.appendTo(this.$blockContainer);\n            }\n\n            var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                footHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].footHtml, id);\n\n            $(bodyHtml).appendTo($fieldsContainer);\n\n            this.trigger('blockAdded', {\n                $block: $block\n            });\n\n            // Animate the block into position\n            $block.css(this.getHiddenBlockCss($block)).velocity({\n                opacity: 1,\n                'margin-bottom': 10\n            }, 'fast', $.proxy(function() {\n                $block.css('margin-bottom', '');\n                Garnish.$bod.append(footHtml);\n                Craft.initUiElements($fieldsContainer);\n                new MatrixBlock(this, $block);\n                this.blockSort.addItems($block);\n                this.blockSelect.addItems($block);\n                this.updateAddBlockBtn();\n\n                Garnish.requestAnimationFrame(function() {\n                    if (typeof autofocus === 'undefined' || autofocus) {\n                        // Scroll to the block\n                        Garnish.scrollContainerToElement($block);\n                        // Focus on the first text input\n                        $block.find('.text,[contenteditable]').first().trigger('focus');\n                    }\n\n                    // Resume the draft editor\n                    if (window.draftEditor) {\n                        window.draftEditor.resume();\n                    }\n                });\n            }, this));\n        },\n\n        getBlockTypeByHandle: function(handle) {\n            for (var i = 0; i < this.blockTypes.length; i++) {\n                if (this.blockTypes[i].handle === handle) {\n                    return this.blockTypes[i];\n                }\n            }\n        },\n\n        collapseSelectedBlocks: function() {\n            this.callOnSelectedBlocks('collapse');\n        },\n\n        expandSelectedBlocks: function() {\n            this.callOnSelectedBlocks('expand');\n        },\n\n        disableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('disable');\n        },\n\n        enableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('enable');\n        },\n\n        deleteSelectedBlocks: function() {\n            this.callOnSelectedBlocks('selfDestruct');\n        },\n\n        callOnSelectedBlocks: function(fn) {\n            for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n            }\n        },\n\n        getHiddenBlockCss: function($block) {\n            return {\n                opacity: 0,\n                marginBottom: -($block.outerHeight())\n            };\n        },\n\n        getParsedBlockHtml: function(html, id) {\n            if (typeof html === 'string') {\n                return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n            } else {\n                return '';\n            }\n        },\n\n        get maxBlocks() {\n            return this.settings.maxBlocks;\n        },\n    }, {\n        defaults: {\n            placeholderKey: null,\n            maxBlocks: null,\n            staticBlocks: false,\n        },\n\n        collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n        getCollapsedBlockIds: function() {\n            if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n            } else {\n                return [];\n            }\n        },\n\n        setCollapsedBlockIds: function(ids) {\n            localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n        },\n\n        rememberCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                if ($.inArray('' + id, collapsedBlocks) === -1) {\n                    collapsedBlocks.push(id);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        },\n\n        forgetCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        }\n    });\n\n    var MatrixBlock = Garnish.Base.extend({\n        matrix: null,\n        $container: null,\n        $titlebar: null,\n        $fieldsContainer: null,\n        $previewContainer: null,\n        $actionMenu: null,\n        $collapsedInput: null,\n\n        isNew: null,\n        id: null,\n\n        collapsed: false,\n\n        init: function(matrix, $container) {\n            this.matrix = matrix;\n            this.$container = $container;\n            this.$titlebar = $container.children('.titlebar');\n            this.$previewContainer = this.$titlebar.children('.preview');\n            this.$fieldsContainer = $container.children('.fields');\n\n            this.$container.data('block', this);\n\n            this.id = this.$container.data('id');\n            this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n            var $menuBtn = this.$container.find('> .actions > .settings'),\n                menuBtn = new Garnish.MenuBtn($menuBtn);\n\n            this.$actionMenu = menuBtn.menu.$container;\n\n            menuBtn.menu.settings.onOptionSelect = $.proxy(this, 'onMenuOptionSelect');\n\n            menuBtn.menu.on('show', () => {\n                this.$container.addClass('active');\n                if (this.$container.prev('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().addClass('hidden');\n                }\n                if (this.$container.next('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().addClass('hidden');\n                }\n            });\n            menuBtn.menu.on('hide', () => {\n                this.$container.removeClass('active');\n            });\n\n            // Was this block already collapsed?\n            if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                this.collapse();\n            }\n\n            this._handleTitleBarClick = function(ev) {\n                ev.preventDefault();\n                this.toggle();\n            };\n\n            this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n        },\n\n        toggle: function() {\n            if (this.collapsed) {\n                this.expand();\n            } else {\n                this.collapse(true);\n            }\n        },\n\n        collapse: function(animate) {\n            if (this.collapsed) {\n                return;\n            }\n\n            this.$container.addClass('collapsed');\n\n            var previewHtml = '',\n                $fields = this.$fieldsContainer.children().children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                    inputPreviewText = '';\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $($inputs[j]),\n                        value;\n\n                    if ($input.hasClass('label')) {\n                        var $maybeLightswitchContainer = $input.parent().parent();\n\n                        if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                            ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                            (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                        )) {\n                            continue;\n                        }\n\n                        value = $input.text();\n                    } else {\n                        value = Craft.getText(Garnish.getInputPostVal($input));\n                    }\n\n                    if (value instanceof Array) {\n                        value = value.join(', ');\n                    }\n\n                    if (value) {\n                        value = Craft.trim(value);\n\n                        if (value) {\n                            if (inputPreviewText) {\n                                inputPreviewText += ', ';\n                            }\n\n                            inputPreviewText += value;\n                        }\n                    }\n                }\n\n                if (inputPreviewText) {\n                    previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                }\n            }\n\n            this.$previewContainer.html(previewHtml);\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            if (animate) {\n                this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                this.$container.velocity({height: 16}, 'fast');\n            } else {\n                this.$previewContainer.show();\n                this.$fieldsContainer.hide();\n                this.$container.css({height: 16});\n            }\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n            }, this), 200);\n\n            // Remember that?\n            if (!this.isNew) {\n                Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n            } else {\n                if (!this.$collapsedInput) {\n                    this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                } else {\n                    this.$collapsedInput.val('1');\n                }\n            }\n\n            this.collapsed = true;\n        },\n\n        expand: function() {\n            if (!this.collapsed) {\n                return;\n            }\n\n            this.$container.removeClass('collapsed');\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            var collapsedContainerHeight = this.$container.height();\n            this.$container.height('auto');\n            this.$fieldsContainer.show();\n            var expandedContainerHeight = this.$container.height();\n            var displayValue = this.$fieldsContainer.css('display') || 'block';\n            this.$container.height(collapsedContainerHeight);\n            this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n            this.$container.velocity({height: expandedContainerHeight}, 'fast', $.proxy(function() {\n                this.$previewContainer.html('');\n                this.$container.height('auto');\n            }, this));\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n            }, this), 200);\n\n            // Remember that?\n            if (!this.isNew && typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n\n            if (!this.isNew) {\n                Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n            } else if (this.$collapsedInput) {\n                this.$collapsedInput.val('');\n            }\n\n            this.collapsed = false;\n        },\n\n        disable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n            this.$container.addClass('disabled');\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n            }, this), 200);\n\n            this.collapse(true);\n        },\n\n        enable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n            this.$container.removeClass('disabled');\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n            }, this), 200);\n        },\n\n        moveUp: function() {\n            let $prev = this.$container.prev('.matrixblock');\n            if ($prev.length) {\n                this.$container.insertBefore($prev);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        moveDown: function() {\n            let $next = this.$container.next('.matrixblock');\n            if ($next.length) {\n                this.$container.insertAfter($next);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        onMenuOptionSelect: function(option) {\n            var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                $option = $(option);\n\n            switch ($option.data('action')) {\n                case 'collapse': {\n                    if (batchAction) {\n                        this.matrix.collapseSelectedBlocks();\n                    } else {\n                        this.collapse(true);\n                    }\n\n                    break;\n                }\n\n                case 'expand': {\n                    if (batchAction) {\n                        this.matrix.expandSelectedBlocks();\n                    } else {\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'disable': {\n                    if (batchAction) {\n                        this.matrix.disableSelectedBlocks();\n                    } else {\n                        this.disable();\n                    }\n\n                    break;\n                }\n\n                case 'enable': {\n                    if (batchAction) {\n                        this.matrix.enableSelectedBlocks();\n                    } else {\n                        this.enable();\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'moveUp': {\n                    this.moveUp();\n                    break;\n                }\n\n                case 'moveDown': {\n                    this.moveDown();\n                    break;\n                }\n\n                case 'add': {\n                    var type = $option.data('type');\n                    this.matrix.addBlock(type, this.$container);\n                    break;\n                }\n\n                case 'delete': {\n                    if (batchAction) {\n                        if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                            this.matrix.deleteSelectedBlocks();\n                        }\n                    } else {\n                        this.selfDestruct();\n                    }\n\n                    break;\n                }\n            }\n        },\n\n        selfDestruct: function() {\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', $.proxy(function() {\n                this.$container.remove();\n                this.matrix.updateAddBlockBtn();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n\n                this.matrix.trigger('blockDeleted', {\n                    $block: this.$container,\n                });\n            }, this));\n        }\n    });\n})(jQuery);\n"]}