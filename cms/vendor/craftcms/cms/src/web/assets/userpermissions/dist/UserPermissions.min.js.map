{"version":3,"sources":["userpermissions/src/UserPermissions.js"],"names":["$","Craft","UserPermissions","Garnish","Base","extend","$wrapper","$selectAllBtn","init","wrapper","$allCheckboxes","addListener","updateSelectAllBtn","this","toggleSelectAll","ev","canSelectAll","filter","trigger","toggleCheckbox","preventDefault","currentTarget","$checkbox","prop","parent","find","$childrenCheckboxes","text","t","userPermissions","length","each","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,gBAAAC,QAAAC,KAAAC,OAAA,CACMH,SAAAA,KACFI,cADwC,KAExCC,eAFwC,KAKpCC,KAAE,SAASC,GACNH,KAAAA,SAAWG,EACXF,KAAAA,cAAkBP,EAAA,cAAoBM,KAAAA,UACtCI,KAAAA,eAAmBV,EAAA,8CAAoDM,KAAAA,UAGvEK,KAAAA,YAAiBD,KAAAA,cAAgB,QAAS,mBAC1CE,KAAAA,YAALC,KAAAH,eAAA,QAAA,kBAZoCG,KAAAD,sBAiBhCE,gBAAKJ,SAALK,GACGF,KAAAG,eACEN,KAAAA,eAAsBO,OAAA,kBAAoBC,QAA/C,SAAAL,KAAKH,eAAeO,OAAO,YAAYC,QAAQ,SAMvDC,EAAAA,kBAEIA,eAAI,SAAeJ,GACZK,IAAAA,EAAHpB,EAAAe,EAAAM,eACA,GAAAC,EAAAC,KAAA,YAAA,YACHR,EAAAK,iBAEUE,EAAUE,OAAO,MAAMC,KAAK,QAAvC,IAGIH,EAA2BA,EAAAE,OAAA,MAAAC,KAAA,2DAExBH,EAAAC,KAAA,WACHG,EAA2BH,KAAA,YAAYL,IAE1CQ,EAAAT,OAAA,YAAAC,QAAA,SADGQ,EAAoBH,KAAK,YAAY,IAM7CX,KAAAA,sBACIA,mBAEO,WACEL,KAAAA,eACRM,KAAAN,cAAAoB,KAAA1B,MAAA2B,EAAA,MAAA,eAGOf,KAAEN,cAAWoB,KAAA1B,MAAA2B,EAAA,MAAA,kBAKzBC,aAAe,WAEZA,QAAAA,KAAiBnB,eAAWO,OAAA,kBAAAa,UAFnC,IAAID,EAAkB7B,EAAE,qBAExBA,EAAE+B,KAAKF,GAAiB,WACpB,IAAI5B,MAAMC,gBAAgBW,SAhElC,CAkEGmB","file":"UserPermissions.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.UserPermissions = Garnish.Base.extend({\n        $wrapper: null,\n        $selectAllBtn: null,\n        $allCheckboxes: null,\n\n        init: function(wrapper) {\n            this.$wrapper = wrapper;\n            this.$selectAllBtn = $('.select-all', this.$wrapper);\n            this.$allCheckboxes = $('input[type=checkbox]:not(.group-permission)', this.$wrapper);\n\n            this.addListener(this.$selectAllBtn, 'click', 'toggleSelectAll');\n            this.addListener(this.$allCheckboxes, 'click', 'toggleCheckbox');\n            this.updateSelectAllBtn();\n        },\n\n        toggleSelectAll: function(ev) {\n            if (this.canSelectAll()) {\n                this.$allCheckboxes.filter(':not(:checked)').trigger('click');\n            } else {\n                this.$allCheckboxes.filter(':checked').trigger('click');\n            }\n\n            ev.preventDefault();\n        },\n\n        toggleCheckbox: function(ev) {\n            let $checkbox = $(ev.currentTarget);\n            if ($checkbox.prop('disabled')) {\n                ev.preventDefault();\n                return;\n            }\n\n            let $uls = $checkbox.parent('li').find('> ul');\n            let $childrenCheckboxes = $checkbox.parent('li').find('> ul > li > input[type=checkbox]:not(.group-permission)');\n\n            if ($checkbox.prop('checked')) {\n                $childrenCheckboxes.prop('disabled', false);\n            } else {\n                $childrenCheckboxes.filter(':checked').trigger('click');\n                $childrenCheckboxes.prop('disabled', true);\n            }\n\n            this.updateSelectAllBtn();\n        },\n\n        updateSelectAllBtn: function() {\n            if (this.canSelectAll()) {\n                this.$selectAllBtn.text(Craft.t('app', 'Select All'));\n            } else {\n                this.$selectAllBtn.text(Craft.t('app', 'Deselect All'));\n            }\n        },\n\n        canSelectAll: function() {\n            return !!this.$allCheckboxes.filter(':not(:checked)').length;\n        }\n    });\n\n    var userPermissions = $('.user-permissions');\n\n    $.each(userPermissions, function() {\n        new Craft.UserPermissions(this);\n    });\n})(jQuery);\n"]}