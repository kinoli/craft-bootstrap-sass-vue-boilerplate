{"version":3,"sources":["fieldsettings/src/fieldsettings.js"],"names":["$","Craft","FieldSettingsToggle","Garnish","Base","extend","$toggle","$container","namespace","currentType","_cancelToken","_ignoreFailedRequest","init","toggle","container","settings","typeSettings","this","val","setSettings","addListener","defaults","handleToggleChange","cancel","requestAnimationFrame","children","detach","appendTo","html","data","replace","response","token","$settings","then","wrapWithTypeClassDiv","settingsHtml","formatInputId","append","initUiElements","appendHeadHtml","headHtml","appendFootHtml","footHtml","catch","displayError","t","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,oBAAAC,QAAAC,KAAAC,OAAA,CACMH,QAAAA,KACFI,WAD4C,KAE5CC,UAAY,KACZC,YAH4C,KAI5CC,aAJ4C,KAO5CC,aAP4C,KAQ5CC,sBAAsB,EAGlBC,KAAKN,SAAYO,EAAjBC,EAAAN,EAAAO,GACKR,KAAAA,QAAeO,EAAAA,GACfN,KAAAA,WAAYA,EAAjBM,GACKL,KAAAA,UAAcD,EACdQ,KAAAA,YAALC,KAAAX,QAAAY,MACKC,KAAAA,aAAL,GACKC,KAAAA,YAAiBd,EAASL,MAA/BC,oBAAyCmB,UAjBDJ,KAAAG,YAAAH,KAAAX,QAAA,SAAA,uBAsBxCgB,mBAAA,WAcI,GAdAL,KAAKP,eAEAA,KAAAA,sBAAL,EAAAO,KAAKP,aAAaa,SACVC,QAAAA,sBAA4B,KAC3Bb,KAAAA,sBAAL,KAKHK,KAAAA,aAAkBP,KAAAA,aAAoBF,KAAAA,WAAWkB,WAAhBC,SAEtCT,KAAKR,YAAcQ,KAAKX,QAAQY,WAGsBX,IAA7CS,KAAaA,aAAKP,KAAakB,aAIxC,YAHIV,KAAAD,aAAAC,KAAAR,aAAAkB,SAAAV,KAAAV,YAIJU,KAAKV,WAAWqB,KAAK,wDAMbX,KAAEP,aAAKD,MAAAA,YAAAA,SADf,IAAIoB,EAAO,CAGFrB,KAAAA,KAAWC,aAEnBQ,KAAAT,YADGqB,EAAKrB,UAAYS,KAAKT,UAAUsB,QAAQ,YAAab,KAAKR,cAKtDR,MAAE4B,kBAAAA,OAAAA,yBAAAA,CACFE,YAAYd,KAAAP,aAAAsB,MACZC,KAASJ,IADdK,KAAKH,IAEA,IAAKhB,EAASoB,EAAAA,EAAAA,KAAsBC,cAAA,IAC3BnB,KAAKF,SAAUoB,uBAChBlC,EAAMoC,EAAAA,SAAmB5B,CACvBwB,GAAAA,MAFVI,cAAApB,KAAAR,eAGH6B,OAAAL,IACI1B,KAAAA,WAALqB,KAAyBU,IAAOL,OAAAA,GAC1BM,MAAAA,eAAoBhC,KAAAA,YACpBiC,MAAAA,eAAuBT,EAAMU,KAAnCA,UACMC,MAAAA,eAAuBX,EAAMY,KAAnCA,YACKC,MAAM,KACDjC,KAAAA,uBACGkC,MAAAA,GAAAA,aAAqB5C,MAAO6C,EAAA,MAAA,6BAChCvC,KAALA,WAAAqB,KAAA,SAIb,CACCP,SAAU,CACNc,sBAAsB,KA/ElC,CAkFGY","file":"fieldsettings.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.FieldSettingsToggle = Garnish.Base.extend({\n        $toggle: null,\n        $container: null,\n        namespace: null,\n        currentType: null,\n        typeSettings: null,\n\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(toggle, container, namespace, settings) {\n            this.$toggle = $(toggle);\n            this.$container = $(container);\n            this.namespace = namespace;\n            this.currentType = this.$toggle.val();\n            this.typeSettings = {};\n            this.setSettings(settings, Craft.FieldSettingsToggle.defaults);\n            this.addListener(this.$toggle, 'change', 'handleToggleChange');\n        },\n\n        handleToggleChange: function() {\n            // Cancel the current request\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n\n            // Save & detach the current settings\n            this.typeSettings[this.currentType] = this.$container.children().detach();\n\n            this.currentType = this.$toggle.val();\n\n            if (typeof this.typeSettings[this.currentType] !== 'undefined') {\n                this.typeSettings[this.currentType].appendTo(this.$container);\n                return;\n            }\n\n            // Show a spinner\n            this.$container.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            // Create a cancel token\n            this._cancelToken = axios.CancelToken.source();\n\n            let data = {\n                type: this.currentType,\n            };\n            if (this.namespace) {\n                data.namespace = this.namespace.replace(/__TYPE__/g, this.currentType);\n            }\n\n            Craft.sendActionRequest('POST', 'fields/render-settings', {\n                cancelToken: this._cancelToken.token,\n                data: data\n            }).then(response => {\n                let $settings = $(response.data.settingsHtml || '');\n                if (this.settings.wrapWithTypeClassDiv) {\n                    $settings = $('<div/>', {\n                        id: Craft.formatInputId(this.currentType)\n                    }).append($settings);\n                }\n                this.$container.html('').append($settings);\n                Craft.initUiElements(this.$container);\n                Craft.appendHeadHtml(response.data.headHtml);\n                Craft.appendFootHtml(response.data.footHtml);\n            }).catch(() => {\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    this.$container.html('');\n                }\n            });\n        },\n    }, {\n        defaults: {\n            wrapWithTypeClassDiv: false,\n        }\n    });\n})(jQuery);\n"]}