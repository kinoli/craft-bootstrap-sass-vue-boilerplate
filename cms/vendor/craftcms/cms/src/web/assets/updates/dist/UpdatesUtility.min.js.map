{"version":3,"sources":["updates/src/UpdatesUtility.js"],"names":["$","Craft","UpdatesUtility","Garnish","Base","extend","$body","totalAvailableUpdates","criticalUpdateAvailable","allowUpdates","init","$status","installableUpdates","forceRefresh","processUpdate","updates","cms","info","this","plugins","length","i","remove","$graphic","text","createUpdateForm","t","num","headingText","updateInfo","isPlugin","addClass","update","push","releases","method","append","getCsrfInput","installable","$form","label","name","value","type","handle","latestVersion","packageName","licenseHud","class","Update","updatesPage","$container","createHeading","$header","createCta","$contents","$releaseContainer","status","$licenseSubmitBtn","licenseSubmitAction","createPane","initReleases","statusText","insertBefore","appendTo","href","ctaUrl","$buttonContainer","$headingContainer","releaseInfo","ctaText","createContainer","Release","notesId","Math","floor","random","version","createReleaseNotes","FieldToggle","critical","notes","data-target","formatDate","date","maxInitialUpdateHeight","id","html","$notes","find","jQuery"],"mappings":"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","file":"UpdatesUtility.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.UpdatesUtility = Garnish.Base.extend({\n        $body: null,\n        totalAvailableUpdates: 0,\n        criticalUpdateAvailable: false,\n        allowUpdates: null,\n        installableUpdates: null,\n\n        init: function() {\n            this.$body = $('#content');\n\n            var $graphic = $('#graphic'),\n                $status = $('#status');\n\n            this.installableUpdates = [];\n\n            var data = {\n                forceRefresh: true,\n                includeDetails: true\n            };\n\n            Craft.cp.checkForUpdates(true, true, function(info) {\n                this.allowUpdates = info.allowUpdates;\n\n                // Craft CMS update?\n                if (info.updates.cms) {\n                    this.processUpdate(info.updates.cms, false);\n                }\n\n                // Plugin updates?\n                if (info.updates.plugins && info.updates.plugins.length) {\n                    for (var i = 0; i < info.updates.plugins.length; i++) {\n                        this.processUpdate(info.updates.plugins[i], true);\n                    }\n                }\n\n                if (this.totalAvailableUpdates) {\n                    $graphic.remove();\n                    $status.remove();\n\n                    // Add the page title\n                    var headingText = Craft.t('app', '{num, number} {num, plural, =1{Available Update} other{Available Updates}}', {\n                        num: this.totalAvailableUpdates,\n                    });\n\n                    $('#header h1').text(headingText);\n\n                    if (this.allowUpdates && this.installableUpdates.length > 1) {\n                        this.createUpdateForm(Craft.t('app', 'Update all'), this.installableUpdates)\n                            .insertAfter($('#header > .flex:last'));\n                    }\n                } else {\n                    $graphic.addClass('success');\n                    $status.text(Craft.t('app', 'Youâ€™re all up-to-date!'));\n                }\n            }.bind(this));\n        },\n\n        processUpdate: function(updateInfo, isPlugin) {\n            if (!updateInfo.releases.length) {\n                return;\n            }\n\n            this.totalAvailableUpdates++;\n\n            var update = new Update(this, updateInfo, isPlugin);\n            if (update.installable) {\n                this.installableUpdates.push(update);\n            }\n        },\n\n        createUpdateForm: function(label, updates) {\n            var $form = $('<form/>', {\n                method: 'post'\n            });\n\n            $form.append(Craft.getCsrfInput());\n            $form.append($('<input/>', {\n                type: 'hidden',\n                name: 'action',\n                value: 'updater'\n            }));\n            $form.append($('<input/>', {\n                type: 'hidden',\n                name: 'return',\n                value: 'utilities/updates'\n            }));\n\n            for (var i = 0; i < updates.length; i++) {\n                $form.append($('<input/>', {\n                    type: 'hidden',\n                    name: 'install[' + updates[i].updateInfo.handle + ']',\n                    value: updates[i].updateInfo.latestVersion\n                }));\n                $form.append($('<input/>', {\n                    type: 'hidden',\n                    name: 'packageNames[' + updates[i].updateInfo.handle + ']',\n                    value: updates[i].updateInfo.packageName\n                }));\n            }\n\n            $form.append($('<button/>', {\n                type: 'submit',\n                text: label,\n                class: 'btn submit'\n            }));\n\n            return $form;\n        }\n    });\n\n    var Update = Garnish.Base.extend({\n        updateInfo: null,\n        isPlugin: null,\n        installable: true,\n\n        $container: null,\n        $header: null,\n        $contents: null,\n        $releaseContainer: null,\n        $showAllLink: null,\n\n        licenseHud: null,\n        $licenseSubmitBtn: null,\n        licenseSubmitAction: null,\n\n        init: function(updatesPage, updateInfo, isPlugin) {\n            this.updatesPage = updatesPage;\n            this.updateInfo = updateInfo;\n            this.isPlugin = isPlugin;\n\n            this.createPane();\n            this.initReleases();\n            this.createHeading();\n            this.createCta();\n\n            // Any ineligible releases?\n            if (this.updateInfo.status !== 'eligible') {\n                $('<blockquote class=\"note ineligible\"><p>' + this.updateInfo.statusText + '</p></blockquote>').insertBefore(this.$releaseContainer);\n\n                if (this.updateInfo.status === 'expired' || this.updateInfo.latestVersion === null) {\n                    this.installable = false;\n                }\n            }\n        },\n\n        createPane: function() {\n            this.$container = $('<div class=\"update\"/>').appendTo(this.updatesPage.$body);\n            this.$header = $('<div class=\"update-header\"/>').appendTo(this.$container);\n            this.$contents = $('<div class=\"readable\"/>').appendTo(this.$container);\n            this.$releaseContainer = $('<div class=\"releases\"/>').appendTo(this.$contents);\n        },\n\n        createHeading: function() {\n            $('<div class=\"readable left\"/>').appendTo(this.$header).append(\n                $('<h1/>', {text: this.updateInfo.name})\n            );\n        },\n\n        createCta: function() {\n            if (!this.updatesPage.allowUpdates || !this.updateInfo.latestVersion || this.updateInfo.ctaUrl === false) {\n                return;\n            }\n\n            var $buttonContainer = $('<div class=\"buttons right\"/>').appendTo(this.$header);\n            if (typeof this.updateInfo.ctaUrl !== 'undefined') {\n                $('<a/>', {\n                    'class': 'btn submit',\n                    text: this.updateInfo.ctaText,\n                    href: this.updateInfo.ctaUrl\n                }).appendTo($buttonContainer);\n            } else {\n                this.updatesPage.createUpdateForm(this.updateInfo.ctaText, [this])\n                    .appendTo($buttonContainer);\n            }\n        },\n\n        initReleases: function() {\n            for (var i = 0; i < this.updateInfo.releases.length; i++) {\n                new Release(this, this.updateInfo.releases[i]);\n            }\n        }\n    });\n\n    var Release = Garnish.Base.extend({\n        update: null,\n        releaseInfo: null,\n        notesId: null,\n\n        $container: null,\n        $headingContainer: null,\n\n        init: function(update, releaseInfo) {\n            this.update = update;\n            this.releaseInfo = releaseInfo;\n            this.notesId = 'notes-' + Math.floor(Math.random() * 1000000);\n\n            this.createContainer();\n            this.createHeading();\n\n            if (this.releaseInfo.notes) {\n                this.createReleaseNotes();\n                new Craft.FieldToggle(this.$headingContainer);\n            }\n        },\n\n        createContainer: function() {\n            this.$container = $('<div class=\"pane release\"/>').appendTo(this.update.$releaseContainer);\n\n            if (this.releaseInfo.critical) {\n                this.$container.addClass('critical');\n            }\n        },\n\n        createHeading: function() {\n            if (this.releaseInfo.notes) {\n                this.$headingContainer = $('<a/>', {'class': 'release-info fieldtoggle', 'data-target': this.notesId});\n            } else {\n                this.$headingContainer = $('<div/>', {'class': 'release-info'});\n            }\n            this.$headingContainer.appendTo(this.$container);\n            $('<h2/>', {text: this.releaseInfo.version}).appendTo(this.$headingContainer);\n            if (this.releaseInfo.critical) {\n                $('<strong/>', {'class': 'critical', text: Craft.t('app', 'Critical')}).appendTo(this.$headingContainer);\n            }\n            if (this.releaseInfo.date) {\n                $('<span/>', {'class': 'date', text: Craft.formatDate(this.releaseInfo.date)}).appendTo(this.$headingContainer);\n            }\n        },\n\n        createReleaseNotes: function() {\n            var $notes = $('<div/>', {id: this.notesId})\n                .appendTo(this.$container)\n                .append($('<div/>', {'class': 'release-notes'}).html(this.releaseInfo.notes));\n\n            // Auto-expand if this is a critical release, or there are any tips/warnings in the release notes\n            if (this.releaseInfo.critical || $notes.find('blockquote').length) {\n                this.$headingContainer.addClass('expanded');\n            } else {\n                $notes.addClass('hidden');\n            }\n        }\n    }, {\n        maxInitialUpdateHeight: 500\n    });\n})(jQuery);\n"]}