{"version":3,"sources":["queuemanager/src/queue-manager.js"],"names":["Vue","el","delimiters","data","loading","indexTimeout","totalJobs","totalJobsFormatted","activeJobId","activeJob","mounted","getElementById","removeAttribute","Craft","on","jobs","cp","jobInfo","slice","formatNumber","this","window","onpopstate","event","state","log","jobId","setActiveJob","m","path","match","history","replaceState","url","methods","updateJobProgress","trackJobProgress","pushState","Promise","resolve","reject","clearTimeout","axios","get","getActionUrl","then","response","id","displayError","error","refreshActiveJob","oldJob","success","status","progress","progressLabel","extend","retryAll","postActionRequest","displayNotice","t","catch","releaseAll","clearActiveJob","confirm","job","message","description","retryActiveJob","releaseJob","retryJob","releaseActiveJob","released","getUrl","isRetryable","jobStatusClass","jobStatusLabel","jobStatusIconClass","c","jobAttributeName","name","ttrValue","value","action","params","textStatus"],"mappings":"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","file":"queue-manager.min.js","sourcesContent":["/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\n/**\n * Vue component for the Queue manager\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @author Global Network Group | Giel Tettelaar <giel@yellowflash.net>\n * @since 3.2\n */\nnew Vue({\n    el: \"#main\",\n    delimiters: ['[[', ']]'],\n    data() {\n        return {\n            loading: false,\n            indexTimeout: null,\n            jobs: [],\n            totalJobs: null,\n            totalJobsFormatted: null,\n            activeJobId: null,\n            activeJob: null,\n            limit: 50\n        }\n    },\n\n    /**\n     * Mounted function\n     */\n    mounted() {\n        document.getElementById('queue-manager-utility').removeAttribute('class')\n\n        Craft.cp.on('setJobInfo', () => {\n            this.jobs = Craft.cp.jobInfo.slice(0)\n            this.totalJobs = Craft.cp.totalJobs\n            this.totalJobsFormatted = Craft.formatNumber(this.totalJobs)\n            if (!this.loading) {\n                this.refreshActiveJob()\n            }\n        })\n\n        window.onpopstate = (event) => {\n            console.log('popstate', event.state)\n            if (event.state && event.state.jobId) {\n                this.setActiveJob(event.state.jobId, false)\n            } else {\n                this.clearActiveJob(false)\n            }\n        }\n\n        // Was a specific job requested?\n        let m = Craft.path.match(/utilities\\/queue-manager\\/([^\\/]+)/)\n        if (m) {\n            let jobId = m[1]\n            history.replaceState({jobId: jobId}, '', this.url(jobId))\n            this.setActiveJob(jobId, false)\n        }\n    },\n\n    methods: {\n        /**\n         * Force-updates the job progress.\n         */\n        updateJobProgress() {\n            Craft.cp.trackJobProgress(false, true)\n        },\n\n        /**\n         * Sets the active job that should be shown.\n         * @param {string} jobId\n         * @param {boolean} pushState\n         * @return {Promise}\n         */\n        setActiveJob(jobId, pushState) {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.loading = true\n                this.activeJobId = jobId\n\n                if (pushState) {\n                    history.pushState({jobId: jobId}, '', this.url(jobId))\n                }\n\n                axios.get(Craft.getActionUrl('queue/get-job-details?id=' + jobId + '', {})).then(response => {\n                    if (response.data.id != this.activeJobId) {\n                        resolve(false)\n                        return\n                    }\n                    this.activeJob = response.data\n                    this.loading = false\n                    resolve(true)\n                }, response => {\n                    Craft.cp.displayError(response.response.data.error)\n                    reject(response)\n                })\n            })\n        },\n\n        /**\n         * Refreshes the active job\n         * @return {Promise}\n         */\n        refreshActiveJob() {\n            return new Promise((resolve, reject) => {\n                if (!this.activeJobId) {\n                    resolve(false)\n                    return\n                }\n                let oldJob = this.activeJob\n                this.setActiveJob(this.activeJobId, false).then((success) => {\n                    // If it's done now, the response is probably missing critical info about the job\n                    if (success && oldJob && this.activeJob.status == 3) {\n                        $.extend(oldJob, {\n                            progress: 100,\n                            status: 3,\n                        })\n                        delete oldJob.error\n                        delete oldJob.progressLabel\n                        this.activeJob = oldJob\n                    }\n                    resolve(success)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries all jobs.\n         * @return {Promise}\n         */\n        retryAll() {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.postActionRequest('queue/retry-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Retrying all failed jobs.'))\n                    this.updateJobProgress()\n                    resolve()\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Releases all jobs.\n         * @return {Promise}\n         */\n        releaseAll() {\n            return new Promise((resolve, reject) => {\n                if (!confirm(Craft.t('app', 'Are you sure you want to release all jobs in the queue?'))) {\n                    resolve(false)\n                    return\n                }\n\n                this.postActionRequest('queue/release-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'All jobs released.'))\n                    this.clearActiveJob(true)\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries a specific job.\n         * @param {Object} job\n         * @return {Promise}\n         */\n        retryJob(job) {\n            return new Promise((resolve, reject) => {\n                // Only confirm if the job is currently reserved\n                if (job.status == 2) {\n                    let message = Craft.t('app', 'Are you sure you want to restart the job “{description}”? Any progress could be lost.', {\n                        description: job.description\n                    })\n                    if (!confirm(message)) {\n                        resolve(false)\n                        return\n                    }\n                }\n\n                window.clearTimeout(this.indexTimeout)\n\n                this.postActionRequest('queue/retry', {id: job.id}).then(response => {\n                    if (job.status == 2) {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job restarted.'))\n                    } else {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job retried.'))\n                    }\n\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries the active job.\n         * @return {Promise}\n         */\n        retryActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.retryJob(this.activeJob).then(resolve).catch(reject)\n            })\n        },\n\n        /**\n         * Releases a job.\n         * @param {Object} job\n         * @returns {Promise}\n         */\n        releaseJob(job) {\n            return new Promise((resolve, reject) => {\n                let message = Craft.t('app', 'Are you sure you want to release the job “{description}”?', {\n                    description: job.description\n                })\n                if (!confirm(message)) {\n                    resolve(false)\n                    return\n                }\n                this.postActionRequest('queue/release', {id: job.id}).then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Job released.'))\n                    this.updateJobProgress()\n                    resolve(true)\n                })\n            })\n        },\n\n        /**\n         * Releases the active job.\n         * @returns {Promise}\n         */\n        releaseActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.releaseJob(this.activeJob).then((released) => {\n                    if (released) {\n                        this.clearActiveJob(true)\n                    }\n                    resolve(released)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Resets an active job so that the index screen is displayed.\n         * @param {boolean} pushState\n         */\n        clearActiveJob(pushState) {\n            if (!this.activeJob) {\n                return\n            }\n\n            this.activeJob = null\n            this.activeJobId = null\n\n            if (pushState) {\n                history.pushState({}, '', this.url())\n            }\n        },\n\n        /**\n         * Returns a Queue Manager URL.\n         * @param {string|null} jobId\n         * @returns {string}\n         */\n        url(jobId) {\n            return Craft.getUrl('utilities/queue-manager' + (jobId ? '/' + jobId : ''))\n        },\n\n        /**\n         * Returns whether a job can be retried.\n         * @param {Object} job\n         * @returns {boolean}\n         */\n        isRetryable(job) {\n            return job.status == 2 || job.status == 4\n        },\n\n        /**\n         * Returns the class name a job's status cell should have.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusClass(status) {\n            if (status == 4) {\n                return 'error'\n            }\n            return ''\n        },\n\n        /**\n         * Returns a job status code.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusLabel(status) {\n            switch (status) {\n                case 1:\n                    return Craft.t('app', 'Pending')\n                    break\n                case 2:\n                    return Craft.t('app', 'Reserved')\n                    break\n                case 3:\n                    return Craft.t('app', 'Finished')\n                    break\n                case 4:\n                    return Craft.t('app', 'Failed')\n                    break\n                default:\n                    return ''\n            }\n        },\n\n        /**\n         * Returns a job status icon class.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusIconClass(status) {\n            let c = 'status'\n            switch (status) {\n                case 1:\n                    c += ' orange'\n                    break\n                case 2:\n                    c += ' green'\n                    break\n                case 4:\n                    c += ' red'\n                    break\n            }\n            return c\n        },\n\n        /**\n         * Returns a job attribute name.\n         * @param {string} name\n         * @returns {string}\n         */\n        jobAttributeName(name) {\n            switch (name) {\n                case 'id':\n                    return Craft.t('app', 'ID')\n                case 'status':\n                    return Craft.t('app', 'Status')\n                case 'progress':\n                    return Craft.t('app', 'Progress')\n                case 'description':\n                    return Craft.t('app', 'Description')\n                case 'ttr':\n                    return Craft.t('app', 'Time to reserve')\n                case 'error':\n                    return Craft.t('app', 'Error')\n                default:\n                    return name\n            }\n        },\n\n        /**\n         * Formats a TTR value.\n         * @param {string} value\n         * @return {string}\n         */\n        ttrValue(value) {\n            return Craft.t('app', '{num, number} {num, plural, =1{second} other{seconds}}', {\n                num: value\n            })\n        },\n\n        /**\n         * Promise wrapper for `Craft.postActionRequest()`.\n         * @param {string} action\n         * @param {Object} params\n         * @returns {Promise}\n         */\n        postActionRequest(action, params) {\n            return new Promise((resolve, reject) => {\n                Craft.postActionRequest(action, params, (response, textStatus) => {\n                    if (textStatus !== 'success') {\n                        reject()\n                        return\n                    }\n                    resolve(response)\n                })\n            })\n        }\n    }\n})\n\n"]}