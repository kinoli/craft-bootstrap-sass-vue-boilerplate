{"version":3,"sources":["sites/src/sites.js"],"names":["$","Craft","SitesAdmin","Garnish","Base","extend","$groups","init","$selectedGroup","find","addListener","$groupSettingsBtn","menuBtn","onOptionSelect","proxy","settings","elem","hasClass","$elem","data","renameSelectedGroup","this","deleteSelectedGroup","addNewGroup","name","promptForGroupName","textStatus","response","href","getUrl","group","id","errors","flattenErrors","alert","join","cp","displayError","oldName","text","newName","displayNotice","t","confirm","postActionRequest","success","location","responseErrors","hasOwnProperty","attribute","concat","$rowToDelete","_deleting","AdminTable","confirmDeleteItem","confirmDeleteModal","$deleteActionRadios","$deleteSubmitBtn","$deleteSpinner","isMobileBrowser","$row","setTimeout","destroy","_createConfirmDeleteModal","validates","first","trigger","validateDeleteInputs","submitDeleteLocale","preventDefault","eq","prop","removeClass","addClass","ev","enable","handleDeleteItemResponse","getItemId","transferContentTo","$transferSelect","val","deleteAction","hide","type","class","site","getItemName","i","appendTo","$bod","$body","$cancelBtn","language","$form","$buttons","sites","length","append","escapeHtml","Modal","jQuery"],"mappings":"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","file":"sites.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = $.proxy(function(elem) {\n                    var $elem = $(elem);\n\n                    if ($elem.hasClass('disabled')) {\n                        return;\n                    }\n\n                    switch ($elem.data('action')) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                }, this);\n            }\n        },\n\n        addNewGroup: function() {\n            var name = this.promptForGroupName('');\n\n            if (name) {\n                var data = {\n                    name: name\n                };\n\n                Craft.postActionRequest('sites/save-group', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites', {groupId: response.group.id});\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        renameSelectedGroup: function() {\n            var oldName = this.$selectedGroup.text(),\n                newName = this.promptForGroupName(oldName);\n\n            if (newName && newName !== oldName) {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.postActionRequest('sites/save-group', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            this.$selectedGroup.text(response.group.name);\n                            Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        promptForGroupName: function(oldName) {\n            return prompt(Craft.t('app', 'What do you want to name the group?'), oldName);\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.postActionRequest('sites/delete-group', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites');\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend({\n        confirmDeleteModal: null,\n\n        $rowToDelete: null,\n        $deleteActionRadios: null,\n        $deleteSubmitBtn: null,\n        $deleteSpinner: null,\n\n        _deleting: false,\n\n        confirmDeleteItem: function($row) {\n            if (this.confirmDeleteModal) {\n                this.confirmDeleteModal.destroy();\n                delete this.confirmDeleteModal;\n            }\n\n            this._createConfirmDeleteModal($row);\n\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                setTimeout($.proxy(function() {\n                    this.$deleteActionRadios.first().trigger('focus');\n                }, this), 100);\n            }\n\n            return false;\n        },\n\n        validateDeleteInputs: function() {\n            var validates = (\n                this.$deleteActionRadios.eq(0).prop('checked') ||\n                this.$deleteActionRadios.eq(1).prop('checked')\n            );\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            } else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        submitDeleteLocale: function(ev) {\n            ev.preventDefault();\n\n            if (this._deleting || !this.validateDeleteInputs()) {\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this._deleting = true;\n\n            var data = {\n                id: this.getItemId(this.$rowToDelete)\n            };\n\n            // Are we transferring content?\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                data.transferContentTo = this.$transferSelect.val();\n            }\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._deleting = false;\n                    this.enable();\n                    this.confirmDeleteModal.hide();\n                    this.handleDeleteItemResponse(response, this.$rowToDelete);\n                }\n            }, this));\n        },\n\n        _createConfirmDeleteModal: function($row) {\n            this.$rowToDelete = $row;\n\n            let id = this.getItemId($row);\n            let name = this.getItemName($row);\n\n            let $form = $(\n                '<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\">' +\n                Craft.getCsrfInput() +\n                '<input type=\"hidden\" name=\"action\" value=\"localization/deleteLocale\"/>' +\n                '<input type=\"hidden\" name=\"id\" value=\"' + id + '\"/>' +\n                '</form>'\n            ).appendTo(Garnish.$bod);\n            let $body = $(\n                '<div class=\"body\">' +\n                '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                '<div class=\"options\">' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                '<div id=\"transferselect\" class=\"select\">' +\n                '<select/>' +\n                '</div>' +\n                '</div>' +\n                '<div>' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                '</div>' +\n                '</div>'\n            ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$transferSelect = $('#transferselect').find('> select');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Delete {site}', {site: name}),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            for (var i = 0; i < Craft.sites.length; i++) {\n                if (Craft.sites[i].id != id) {\n                    this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                }\n            }\n\n            this.confirmDeleteModal = new Garnish.Modal($form);\n\n            this.addListener($cancelBtn, 'click', function() {\n                this.confirmDeleteModal.hide();\n            });\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'submitDeleteLocale');\n        }\n    });\n})(jQuery);\n"]}